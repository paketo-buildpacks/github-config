#!/bin/bash
set -euo pipefail
shopt -s inherit_errexit

function main() {
  local token title body branch base label

  while [ "${#}" != 0 ]; do
    case "${1}" in
      --token)
        token="${2}"
        shift 2
        ;;

      --title)
        title="${2}"
        shift 2
        ;;

      --body)
        body="${2}"
        shift 2
        ;;

      --branch)
        branch="${2}"
        shift 2
        ;;

      --base)
        base="${2}"
        shift 2
        ;;

      --label)
        label="${2}"
        shift 2
        ;;


      "")
        shift
        ;;

      *)
        echo "unknown argument \"${1}\""
        exit 1
    esac
  done

  echo "${token}" | gh auth login --with-token

  count="$(gh pr list --repo "${GITHUB_REPOSITORY}" \
    | awk -v branch="${branch}" '{ if ($(NF-1) == branch) { print }}' \
    | wc -l)"

  if [[ "${count}" != "0" ]]; then
    echo "PR already exists, updated with new commit."
    exit 0
  fi

  echo "Opening Pull Request"

  git config --global --add safe.directory "${GITHUB_WORKSPACE}"
  pushd "${GITHUB_WORKSPACE}" > /dev/null || true
    with_backoff gh pr create \
      --title "${title}" \
      --body "${body}" \
      --base "${base}" \
      --label "${label}"
  popd > /dev/null || true
}

# Retries a command a configurable number of times with backoff.
#
# Successive backoffs double the timeout.
#
# The rough total time is given by 2^(n-1)*t where n is the maximum number of attempts and t is the timeout between retries
# At n=8 and t=1 second the total time is about 2^7*1 = 128 seconds, or about two minutes.
#
# based on: https://stackoverflow.com/questions/8350942/how-to-re-run-the-curl-command-automatically-when-the-error-occurs/8351489#8351489
function with_backoff {
  local max_attempts=8 # about two minutes 
  local timeout=1 # seconds between retries
  local attempt=1
  local exitCode=0

  while (( attempt < max_attempts ))
  do
    echo "running command: ${*}"
    if "$@"
    then
      return 0
    else
      exitCode=$?
    fi

    echo "Failed to run command. Retrying in $timeout seconds..." 1>&2
    sleep $timeout
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout * 2 ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "Failed after ${attempt} attempts" 1>&2
  fi

  return $exitCode
}

main "${@:-}"