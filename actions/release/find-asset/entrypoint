#!/usr/bin/env bash
set -euo pipefail
shopt -s inherit_errexit

function main() {
  local depth pattern repo strict
  while [[ "${#}" != 0 ]]; do
    case "${1}" in
      --depth)
        depth="${2}"
        shift 2
        ;;

      --pattern)
        pattern="${2}"
        shift 2
        ;;

      --repo)
        repo="${2}"
        shift 2
        ;;

      --strict)
        strict="${2}"
        shift 2
        ;;

      "")
        # skip if the argument is empty
        shift 1
        ;;

      *)
        echo "Unknown argument" "$@"
        exit 1
    esac
  done

  if [[ -z "${GITHUB_TOKEN}" ]]; then
    echo "Must set \$GITHUB_TOKEN"
    exit 1
  fi

  gh auth status

  find_asset "${repo}" "${depth}" "${pattern}" "${strict}"
}

function find_asset() {
  local repo depth pattern strict
  repo="${1}"
  depth="${2}"
  pattern="${3}"
  strict="${4}"

  release_json=$(gh api "repos/${repo}/releases"  \
    --method GET \
    --paginate \
    | jq -r \
    --arg pattern "${pattern}" \
    --argjson depth "${depth}" \
    'sort_by(.tag_name | .[1:] | split(".") | map(tonumber))
    | reverse
    | map(select(.draft==false))
    | limit($depth; .)
    | map(select(.assets | .[] | select(.name | test($pattern))))
    | .[0]' \
  )

  if [[ "${release_json}" == "null" ]]; then
      if [[ "${strict}" == "true" ]]; then
        echo "Error: no matching asset found for pattern: '${pattern}' on repo: ${repo} and depth: ${depth}."
        exit 1
      fi
    url=""
  fi

  release_version=$(echo "${release_json}" | jq -r '.tag_name')

  assets_json=$(echo "${release_json}" \
    | jq -r \
    --arg pattern "${pattern}" \
    '.assets | map(select(.name|test($pattern)))')

  asset_count=$(echo "${assets_json}" | jq 'length')

  if [[ "${asset_count}" -gt 1 ]]; then
    echo "Error: expected one asset - found ${asset_count} assets matching pattern: '${pattern}' on ${repo} ${release_version}."
    echo "${assets_json}" | jq -r '.[] | "- " + (.name)'
    exit 1
  fi

  asset_name=$(echo "${assets_json}" | jq -r '.[0].name')
  asset_url=$(echo "${assets_json}" | jq -r '.[0].url')

  echo "Found asset: '${asset_name}' on ${repo} ${release_version}."
  echo "Asset URL: ${asset_url}"

  printf "url=%s\n" "${asset_url}" >> "$GITHUB_OUTPUT"
}

main "${@:-}"

