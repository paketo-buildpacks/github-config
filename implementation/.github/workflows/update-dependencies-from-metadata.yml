name: Update Dependencies From Metadata (Retrieve, Metadata, Compile, Test, Create PR)

on:
  workflow_dispatch:
  # https://crontab.guru/every-12-hours
  schedule:
    - cron: '0 */12 * * *'

jobs:
  select-go-version:
    name: Select Go Version
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.select-go-version.outputs.go-version }}
    steps:
      - name: Select Go Version
        id: select-go-version
        run: echo "::set-output name=go-version::>=1.18.0"

  retrieve:
    name: Retrieve New Versions and Generate Metadata
    needs:
      - select-go-version
    runs-on: ubuntu-latest
    outputs:
      metadata-filepath: ${{ steps.retrieve.outputs.metadata-filepath }}
      metadata-json: ${{ steps.retrieve.outputs.metadata-json }}
      id: ${{ steps.retrieve.outputs.id }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}

      - name: Run Retrieve
        id: retrieve
        working-directory: dependency
        run: |
          OUTPUT="/tmp/metadata.json"

          make retrieve \
            buildpackTomlPath="${{ github.workspace }}/buildpack.toml" \
            output="${OUTPUT}"

          id=`cat "${OUTPUT}" | jq -r .[0].id`
          content=`cat "${OUTPUT}" | jq -r`

          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"

          echo "::set-output name=metadata-filepath::${OUTPUT}"
          echo "::set-output name=metadata-json::$content"
          echo "::set-output name=id::$id"

      - name: Upload `${{ steps.retrieve.outputs.metadata-filepath }}`
        uses: actions/upload-artifact@v3
        with:
          name: metadata.json
          path: ${{ steps.retrieve.outputs.metadata-filepath }}

  # Check if there is buildpack-provided compilation code and testing code
  # Optional compilation code expected at: <buildpack>/dependency/actions/compile/
  # Optional testing code expected at: <buildpack>/dependency/test/
  get-compile-and-test:
    name: Get Compilation and Testing Code
    outputs:
      should-compile: ${{ steps.compile-check.outputs.should-compile }}
      should-test: ${{ steps.test-check.outputs.should-test }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Has Compilation Action?
        id: compile-check
        run: |
          if test -d "dependency/actions/compile"; then
            echo "Compilation action provided"
            echo "::set-output name=should-compile::true"
          fi

      - name: Has Testing Action?
        id: test-check
        run: |
          if test -d "dependency/test"; then
            echo "Testing file provided"
            echo "::set-output name=should-test::true"
          fi

  compile:
    name: Compile and/or Test Dependency
    needs:
      - retrieve
      - get-compile-and-test
    strategy:
      matrix:
        includes: ${{ fromJSON(needs.retrieve.outputs.metadata-json) }}
    # Run job step if
    #   (1) needs.get-compile-and-test.outputs.should-compile -> if there is a dependency/actions/compile directory in the buildpack
    #   (2) needs.get-compile-and-test.outputs.should-test -> if there is a dependency/test directory in the buildpack
    #   (3) See line 113 -> if the dependency SHA256 and URI field are empty, signaling they need to be calculated
    if: ${{ needs.get-compile-and-test.outputs.should-compile == 'true' || needs.get-compile-and-test.outputs.should-test == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Make Temporary Artifact Directory
        id: make-outputdir
        run: |
          echo "::set-output name=outputdir::$(mktemp -d)"

      # Compile if all of the following conditions are met:
      #   (1) compilation Github Action presetn in the buildpack directory
      #   (2) SHA256 in metadata.json is empty
      #   (3) URI in metadata.json is empty
      - name: Compile version ${{ matrix.includes.version }} on ${{ matrix.includes.target }} Dockerfile
        id: compile
        if: ${{ needs.get-compile-and-test.outputs.should-compile && matrix.includes.sha256 == '' && matrix.includes.uri == '' }}
        uses: ./dependency/actions/compile
        with:
          version: "${{ matrix.includes.version }}"
          outputdir: "${{ steps.make-outputdir.outputs.outputdir }}"
          target: "${{ matrix.includes.target }}"

      # If compiled, upload the tarball and SHA256 file for usage in the Update metadata job
      - name: Upload workflow asset
        uses: actions/upload-artifact@v3
        if: ${{ needs.get-compile-and-test.outputs.should-compile && matrix.includes.sha256 == '' && matrix.includes.uri == '' }}
        with:
          name: '${{ needs.retrieve.outputs.id }}-${{ matrix.includes.version }}-${{ matrix.includes.target }}'
          path: '${{ steps.make-outputdir.outputs.outputdir }}/*'

      # Download the tarball for testing if:
      #   (1) dependency testing code is present in the buildpack directory
      #   (2) URI in metadata.json is available
      - name: Download upstream tarball (if not compiled)
        if: ${{ matrix.includes.uri != ''  && needs.get-compile-and-test.outputs.should-test == 'true' }}
        run: |
          curl ${{ matrix.includes.uri }} --silent --location --output ${{ steps.make-outputdir.outputs.outputdir }}/dependency.tgz

      # Test the dependency tarball if:
      #   (1) dependency testing code is present in the buildpack directory
      - name: Test Dependency
        working-directory: dependency
        if: ${{ needs.get-compile-and-test.outputs.should-test == 'true' }}
        run: |
          make test \
            version="${{ matrix.includes.version }}" \
            tarballPath="${{ steps.make-outputdir.outputs.outputdir }}/*.tgz"

  # Add in the SHA256 and URI fields to the metadata if the dependency was compiled
  update-metadata:
    name: Update Metadata (if compiled)
    needs:
      - retrieve
      - get-compile-and-test
      - compile
    strategy:
      matrix:
        includes: ${{ fromJSON(needs.retrieve.outputs.metadata-json) }}
      # Run metadata update step sequentially so that metadata.json can be
      # modified for each version
      max-parallel: 1
    if: ${{ needs.get-compile-and-test.outputs.should-compile == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      ## TODO:
      #   add a bucket upload mechanism
      #   add a step for when upload happens, we update the SHA and URI (steps.parse-matrix.outputs.uri updated)
      #   the Update SHA256 and URI step will change.
      - name: Download SHA256 file
        uses: actions/download-artifact@v3
        with:
          name: '${{ needs.retrieve.outputs.id }}-${{ matrix.includes.version }}-${{ matrix.includes.target }}'

      - name: Get SHA256
        id: get-sha256
        run: echo "::set-output name=sha256::$(cat ${{ needs.retrieve.outputs.id }}-${{ matrix.includes.version }}-${{ matrix.includes.target }}.tgz.sha256)"

      - name: Download metadata.json
        uses: actions/download-artifact@v3
        with:
          name: metadata.json

      - name: Update `sha256` and `uri` in metadata for ${{ matrix.includes.target }} ${{ matrix.includes.version }}
        if: ${{ matrix.includes.sha256 == '' && matrix.includes.uri == '' }}
        uses: paketo-buildpacks/github-config/actions/dependency/update-metadata-json@main
        with:
          version: "${{ matrix.includes.version }}"
          target: "${{ matrix.includes.target }}"
          sha256: ${{ steps.get-sha256.outputs.sha256 }}
          # TODO
          uri: "123456"
          file: "metadata.json"

      - name: Upload modified metadata
        uses: actions/upload-artifact@v3
        with:
          name: "metadata.json"
          path: "metadata.json"

  assemble:
    name: Update buildpack.toml
    needs:
      - retrieve
      - compile
      - update-metadata
    # Update buildpack.toml only if ALL of the following conditions are met:
    #   (1) Retrieval step has succeeded
    #   (2) Compilation/Testing step has succeeded OR been skipped
    #   (3) Update metadata step has succeeded OR been skipped
    if: ${{ needs.retrieve.result == 'success' && (needs.compile.result == 'success' || needs.compile.result == 'skip') && (needs.update-metadata.result == 'success' || needs.update-metadata.result == 'skip') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Checkout Branch
        uses: paketo-buildpacks/github-config/actions/pull-request/checkout-branch@main
        with:
          branch: automation/dependencies/update-from-metadata

      - name: Make Temporary Artifact Directory
        id: make-outputdir
        run: |
          echo "::set-output name=outputdir::$(mktemp -d)"

      - name: Download metadata.json
        uses: actions/download-artifact@v3
        with:
          name: metadata.json
          path: "${{ steps.make-outputdir.outputs.outputdir }}"

      - name: Update dependencies from metadata.json
        id: update
        uses: paketo-buildpacks/github-config/actions/dependency/update-from-metadata@main
        with:
          buildpack_toml_path: "${{ github.workspace }}/buildpack.toml"
          metadata_file_path: "${{ steps.make-outputdir.outputs.outputdir }}/metadata.json"

      - name: Show git diff
        run: |
          git diff

      - name: Commit
        id: commit
        uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
        with:
          message: "Updating buildpack.toml with new versions ${{ steps.update.outputs.new-versions }}"
          pathspec: "."

      - name: Push Branch 'automation/dependencies/update-from-metadata'
        if: ${{ steps.commit.outputs.commit_sha != '' }}
        uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
        with:
          branch: automation/dependencies/update-from-metadata

      - name: Open Pull Request
        if: ${{ steps.commit.outputs.commit_sha != '' }}
        uses: paketo-buildpacks/github-config/actions/pull-request/open@main
        with:
          token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}
          title: "Updates buildpack.toml with ${{ steps.update.outputs.new-versions }}"
          branch: automation/buildpack.toml/update-from-metadata
